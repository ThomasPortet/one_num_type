

pred fetch_recursive_equation i:term, o:list term.

fetch_recursive_equation X [X] :-
  X = (prod _ _ _), !.

fetch_recursive_equation (app [And, Code1, Code2]) R_eqs :-
  std.do! [
    coq.locate "and" Andgref,
    And = global Andgref,
    fetch_recursive_equation Code1 L1,
    fetch_recursive_equation Code2 L2,
    std.append L1 L2 R_eqs
  ].

fetch_recursive_equation {{lp:_ = lp: _}} [].

fetch_recursive_equation A _ :-
  coq.say "wrong term" A,
  coq.error "expecting function specification to be a conjunction of"
   "formulas of the form f 0 = v1 f 1 = v2  or forall n, .. -> f n = V2"
   "but found expressions of another form".

pred collect_base_specs i:term, i:term, o:list (pair int term).

collect_base_specs F {{lp:F lp:V1 = lp:V2}} [S] :-
  std.do! [
    make_one_spec V1 V2 S
  ].

collect_base_specs _F (prod _ _ _) [].

collect_base_specs F {{lp:Code1 /\ lp:Code2}} Specs :-
  std.do! [
    collect_base_specs F Code1 Specs1,
    collect_base_specs F Code2 Specs2,
    std.append Specs1 Specs2 Specs
  ].

pred check_all_present i:int, i:list (pair int term), o:int.

check_all_present N [] N.

check_all_present N [pr N _ | L] N2 :-
  !,
  N1 is N + 1,
  check_all_present N1 L N2.

check_all_present N [pr _ _ | _] _ :-
  coq.error "missing value for" N.

pred make_initial_list i:list (pair int term), o:term.

make_initial_list [] {{ @nil R}}.

make_initial_list [pr _ V | L] (app [{{ @cons R}}, V, Tl]) :-
  make_initial_list L Tl.

pred make_recursive_step_list i:(term -> term), i:int, i:int,
   o:(term -> term).

make_recursive_step_list Func 0 _Rank R :-
  pi V\
   app [{{ cons}}, (Func V), {{ nil }}] = R V.

make_recursive_step_list Func N Rank R :-
  std.do! [
    0 < N,
    N1 is N - 1,
    Rank1 is Rank + 1,
    int_to_nat Rank1 RankTerm,
    make_recursive_step_list Func N1 Rank1 Func',
    pi V \
      app [{{ cons}}, app [{{ nth}}, {{R}}, RankTerm, V, {{ 0}}],
           Func' V] = R V
  ].

pred shift_real i:int, i:term, o:term.

shift_real 0 N N.

shift_real K N {{lp:N + lp:K_as_real}}:-
  std.do! [
    0 < K,
    int_to_real K K_as_real].

% QUIRKY: This function returns the right-hand side of the equality
% coming fromt the step case of the recursive definition.  It simply
% discards the premises of existing implications.  In the, it is expected
% that these conditions are enough to make the recursive equation, but
% they are not subject to any analysis from this code.  In principle, the
% user could include premises that are too strong, thus rendering the
% definition unusable.

pred eat_implications i:term, i:term, i:term, o:term.

eat_implications F N (prod _ _ G) R :-
  %(pi x\ not(occurs x (G x))),
  (pi x y\ G x = G y), !,
  pi h \ 
   eat_implications F N (G h) R.

eat_implications F N {{lp:F lp:N = lp:RHS}} RHS.

pred translate_recursive_body i:int i:term, i:term, i:term, o:term.

translate_recursive_body Order F N RHS R :-
  std.do! [
    % This should recognize (f (n - k)) and store k in the list
    (pi A E Op V\
      fold-map {{lp:F (lp:V - lp:E)}} A
      {{lp:F (lp:V - lp:E)}} [E | A])
        =>
      fold-map RHS [] _ Uses,
    std.map Uses (real_to_int) Uses_int,
    list_max Uses_int MaxUses,
    % Need to generate an abstraction that gives the name L to
    % the result of the recursive call
    std.assert! (MaxUses =< Order)
    "The depth of recursive calls exceeds the number of base values",
    shift_real Order N N_plus_Order,
    % Now performing the replacement for both the recursive calls
    % and the numeric value received as argument
    (pi L \
      ((pi I I' In In' \ copy {{lp:F (lp:N - lp:I)}}
         {{nth lp:I' lp:L 0}} :-
         !,
          real_to_int I In,
          In' is Order - In,
          int_to_nat In' I'),
       copy N N_plus_Order) =>
    copy RHS (RHS' L)),
    Order1 is Order - 1,
    make_recursive_step_list RHS' Order1 0 RecList,
    R = (fun `v` {{list R}} RecList)
].

% The input must have the form:
%  fun f => f 0 = V1 /\ ... f k = Vk /\ forall n, ... -> ... -> f n = E
% Displays the ordered sequence of k integers (in builtin type int), such
% that (f (n - k)) appears in E.
pred find_uses i:term, o:term, o:term.

find_uses (fun N Ty Bo) R Order_Z :-
  pi arg\
    decl arg N Ty => % let one call the pretty printer and type checker inside
    find_uses_of arg (Bo arg) R Order_Z. 
                              % R does not use f recursively, but rather
                              % the value of its recursion history at depth
                              % Order_Z (which must be a cic term of type Z)

pred find_uses_of i:term, i:term, o:term, o:term.

find_uses_of F Spec Final Order_Z :-
  std.do! [
    collect_base_specs F Spec Sps,
    alist_sort Sps Sps2,
    check_all_present 0 Sps2 Order,
    make_initial_list Sps2 ListSps,
    % coq.say "ListSps = " {coq.term->string ListSps},
    fetch_recursive_equation Spec Ts,
% TODO : error reporting is not satisfactory here
    std.assert! (Ts = [prod Scalar_name Sc_type F1])
       "Expecting exactly one recursive equation",
    (pi n\
      decl n Scalar_name Sc_type =>
      (eat_implications F n (F1 n) (Body n),
      translate_recursive_body Order F n (Body n) (Main_expression n))),
    %Final = {{Rnat_rec lp:ListSps (fun x : R => lp:(Main_expression x)) }},
    Final = {{ fun r : R => nth 0 
                (Rnat_rec lp:ListSps lp:{{ fun Scalar_name {{R}}
                              Main_expression}} r) 0}},
    int_to_Z Order Order_Z
  ].

pred make_eqn_proof i:string, i:term, i:term, i:constant.

make_eqn_proof N_id Abs_eqn  Order C :-
std.do![
  Abs_eqn = fun _ _ F,
  Statement = (F (global (const C))),
  Eqs_N_id is N_id ^ "_eqn",
  coq.typecheck Eq_prf Statement ok,
  coq.ltac.collect-goals Eq_prf [G1] _ShelvedGs,
  coq.ltac.open(coq.ltac.call
    "prove_recursive_specification"
    [trm (global (const C)), trm Order]) G1 [],
  coq.env.add-const Eqs_N_id Eq_prf _ @opaque! _C_eqn,
  coq.say "Defined" Eqs_N_id].

make_eqn_proof _ _ _ _ :-
  coq.say "proof of equations failed".

main [trm (fun N Ty _ as Abs_eqn)] :-
std.do! [
  find_uses Abs_eqn Final Order,
  std.assert-ok! (coq.typecheck Final Ty) "Type error",
  coq.name->id N N_id,
  
  coq.env.add-const N_id Final Ty @transparent! C,
  coq.say "Defined" N_id,

  make_eqn_proof N_id Abs_eqn Order C
].

main _L :-
  coq.error [] "Usage: Recursive name equation_1 /\ .. /\ equation_n".
